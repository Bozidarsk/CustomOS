from PIL import Image

fontLength = 95
charsHorizontal = 16 # number of chars on one line
charsVertical = 6

font = [ [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], [ 0x18, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x00 ],    [ 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],    [ 0x36, 0x36, 0x7f, 0x36, 0x7f, 0x36, 0x36, 0x00 ],    [ 0x0c, 0x3e, 0x03, 0x1e, 0x30, 0x1f, 0x0c, 0x00 ],    [ 0x00, 0x63, 0x33, 0x18, 0x0c, 0x66, 0x63, 0x00 ],    [ 0x1c, 0x36, 0x1c, 0x6e, 0x3b, 0x33, 0x6e, 0x00 ],    [ 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 ],    [ 0x18, 0x0c, 0x06, 0x06, 0x06, 0x0c, 0x18, 0x00 ],    [ 0x06, 0x0c, 0x18, 0x18, 0x18, 0x0c, 0x06, 0x00 ],    [ 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00 ],    [ 0x00, 0x0c, 0x0c, 0x3f, 0x0c, 0x0c, 0x00, 0x00 ],    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x06 ],    [ 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00 ],    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00 ],    [ 0x60, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x01, 0x00 ],    [ 0x3e, 0x63, 0x73, 0x7b, 0x6f, 0x67, 0x3e, 0x00 ],    [ 0x0c, 0x0e, 0x0c, 0x0c, 0x0c, 0x0c, 0x3f, 0x00 ],    [ 0x1e, 0x33, 0x30, 0x1c, 0x06, 0x33, 0x3f, 0x00 ],    [ 0x1e, 0x33, 0x30, 0x1c, 0x30, 0x33, 0x1e, 0x00 ],    [ 0x38, 0x3c, 0x36, 0x33, 0x7f, 0x30, 0x78, 0x00 ],    [ 0x3f, 0x03, 0x1f, 0x30, 0x30, 0x33, 0x1e, 0x00 ],    [ 0x1c, 0x06, 0x03, 0x1f, 0x33, 0x33, 0x1e, 0x00 ],    [ 0x3f, 0x33, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x00 ],    [ 0x1e, 0x33, 0x33, 0x1e, 0x33, 0x33, 0x1e, 0x00 ],    [ 0x1e, 0x33, 0x33, 0x3e, 0x30, 0x18, 0x0e, 0x00 ],    [ 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x00 ],    [ 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x06 ],    [ 0x18, 0x0c, 0x06, 0x03, 0x06, 0x0c, 0x18, 0x00 ],    [ 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00 ],    [ 0x06, 0x0c, 0x18, 0x30, 0x18, 0x0c, 0x06, 0x00 ],    [ 0x1e, 0x33, 0x30, 0x18, 0x0c, 0x00, 0x0c, 0x00 ],    [ 0x3e, 0x63, 0x7b, 0x7b, 0x7b, 0x03, 0x1e, 0x00 ],    [ 0x0c, 0x1e, 0x33, 0x33, 0x3f, 0x33, 0x33, 0x00 ],    [ 0x3f, 0x66, 0x66, 0x3e, 0x66, 0x66, 0x3f, 0x00 ],    [ 0x3c, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3c, 0x00 ],    [ 0x1f, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1f, 0x00 ],    [ 0x7f, 0x46, 0x16, 0x1e, 0x16, 0x46, 0x7f, 0x00 ],    [ 0x7f, 0x46, 0x16, 0x1e, 0x16, 0x06, 0x0f, 0x00 ],    [ 0x3c, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7c, 0x00 ],    [ 0x33, 0x33, 0x33, 0x3f, 0x33, 0x33, 0x33, 0x00 ],    [ 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x1e, 0x00 ],    [ 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1e, 0x00 ],    [ 0x67, 0x66, 0x36, 0x1e, 0x36, 0x66, 0x67, 0x00 ],    [ 0x0f, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7f, 0x00 ],    [ 0x63, 0x77, 0x7f, 0x7f, 0x6b, 0x63, 0x63, 0x00 ],    [ 0x63, 0x67, 0x6f, 0x7b, 0x73, 0x63, 0x63, 0x00 ],    [ 0x1c, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1c, 0x00 ],    [ 0x3f, 0x66, 0x66, 0x3e, 0x06, 0x06, 0x0f, 0x00 ],    [ 0x1e, 0x33, 0x33, 0x33, 0x3b, 0x1e, 0x38, 0x00 ],    [ 0x3f, 0x66, 0x66, 0x3e, 0x36, 0x66, 0x67, 0x00 ],    [ 0x1e, 0x33, 0x07, 0x0e, 0x38, 0x33, 0x1e, 0x00 ],    [ 0x3f, 0x2d, 0x0c, 0x0c, 0x0c, 0x0c, 0x1e, 0x00 ],    [ 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3f, 0x00 ],    [ 0x33, 0x33, 0x33, 0x33, 0x33, 0x1e, 0x0c, 0x00 ],    [ 0x63, 0x63, 0x63, 0x6b, 0x7f, 0x77, 0x63, 0x00 ],    [ 0x63, 0x63, 0x36, 0x1c, 0x1c, 0x36, 0x63, 0x00 ],    [ 0x33, 0x33, 0x33, 0x1e, 0x0c, 0x0c, 0x1e, 0x00 ],    [ 0x7f, 0x63, 0x31, 0x18, 0x4c, 0x66, 0x7f, 0x00 ],    [ 0x1e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1e, 0x00 ],    [ 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x40, 0x00 ],    [ 0x1e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1e, 0x00 ],    [ 0x08, 0x1c, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00 ],    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff ],    [ 0x0c, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 ],    [ 0x00, 0x00, 0x1e, 0x30, 0x3e, 0x33, 0x6e, 0x00 ],    [ 0x07, 0x06, 0x06, 0x3e, 0x66, 0x66, 0x3b, 0x00 ],    [ 0x00, 0x00, 0x1e, 0x33, 0x03, 0x33, 0x1e, 0x00 ],    [ 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6e, 0x00 ],    [ 0x00, 0x00, 0x1e, 0x33, 0x3f, 0x03, 0x1e, 0x00 ],    [ 0x1c, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0f, 0x00 ],    [ 0x00, 0x00, 0x6e, 0x33, 0x33, 0x3e, 0x30, 0x1f ],    [ 0x07, 0x06, 0x36, 0x6e, 0x66, 0x66, 0x67, 0x00 ],    [ 0x0c, 0x00, 0x0e, 0x0c, 0x0c, 0x0c, 0x1e, 0x00 ],    [ 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1e ],    [ 0x07, 0x06, 0x66, 0x36, 0x1e, 0x36, 0x67, 0x00 ],    [ 0x0e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x1e, 0x00 ],    [ 0x00, 0x00, 0x33, 0x7f, 0x7f, 0x6b, 0x63, 0x00 ],    [ 0x00, 0x00, 0x1f, 0x33, 0x33, 0x33, 0x33, 0x00 ],    [ 0x00, 0x00, 0x1e, 0x33, 0x33, 0x33, 0x1e, 0x00 ],    [ 0x00, 0x00, 0x3b, 0x66, 0x66, 0x3e, 0x06, 0x0f ],    [ 0x00, 0x00, 0x6e, 0x33, 0x33, 0x3e, 0x30, 0x78 ],    [ 0x00, 0x00, 0x3b, 0x6e, 0x66, 0x06, 0x0f, 0x00 ],    [ 0x00, 0x00, 0x3e, 0x03, 0x1e, 0x30, 0x1f, 0x00 ],    [ 0x08, 0x0c, 0x3e, 0x0c, 0x0c, 0x2c, 0x18, 0x00 ],    [ 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6e, 0x00 ],    [ 0x00, 0x00, 0x33, 0x33, 0x33, 0x1e, 0x0c, 0x00 ],    [ 0x00, 0x00, 0x63, 0x6b, 0x7f, 0x7f, 0x36, 0x00 ],    [ 0x00, 0x00, 0x63, 0x36, 0x1c, 0x36, 0x63, 0x00 ],    [ 0x00, 0x00, 0x33, 0x33, 0x33, 0x3e, 0x30, 0x1f ],    [ 0x00, 0x00, 0x3f, 0x19, 0x0c, 0x26, 0x3f, 0x00 ],    [ 0x38, 0x0c, 0x0c, 0x07, 0x0c, 0x0c, 0x38, 0x00 ],    [ 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 ],    [ 0x07, 0x0c, 0x0c, 0x38, 0x0c, 0x0c, 0x07, 0x00 ],    [ 0x6e, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ] ]

img = Image.open("8x8new.png", 'r').convert('RGB')
pixels = img.load()

x = 0
y = 0
c = 0
row = 0
while (y < 8 * charsVertical):
	x = 0
	while (x < 8 * charsHorizontal):
		if (c > 0x7e - 0x20):
			break
		for _y in range(0, 8):
			for _x in range(0, 8):
				if (pixels[x + (7 - _x), y + _y] != (0, 0, 0)):
					row += 1
				row = row << 1
			font[c][_y] = row >> 1
			row = 0

		c += 1
		x += 8
	y += 8

def output1():
	output = "uint8 font[95][8] = \n{\n    { "
	value = ""
	for ch in range(0, fontLength):
		for i in range(0, 8):
			value = str(hex(font[ch][i]))
			if (len(value) == 3):
				value = value.replace("0x", "0x0")
			output += value + ", "
		output += " },\n    { "

	output += "};"
	output = output.replace(",  },\n    { ", " },\n    { ")
	output = output.replace(" },\n    { };", " }\n};")
	print(output)

def output2():
	output = "font = [ [ "
	value = ""
	for ch in range(0, fontLength):
		for i in range(0, 8):
			value = str(hex(font[ch][i])).replace("0x", "")
			if (len(value) == 1):
				value = "\"0" + value + "\""
			output += value + ", "
		output += " ], ["

	output += "]"
	output = output.replace(", ], [", " ], [")
	output = output.replace(" ], []", " ] ]")
	print(output)

def output3():
	output = "font = [ "
	value = 0
	for ch in range(0, fontLength):
		value = 0
		for i in range(0, 8):
			value += int(str(hex(font[ch][i])).replace("0x", ""))
			value = value << 8
		value = value >> 8
		output += str(hex(value)) + ", "

	output += " ]"
	print(output.replace(",  ]", " ]"))

output1()











# ===============================================================================

# fontc", "3c", "18", "18", "00", "18", "00" ],    [ "36", "36", "00", "00", "00", "00", "00", "00" ],    [ "36", "36", "7f", "36", "7f", "36", "36", "00" ],    [ "0c", "3e", "03", "1e", "30", "1f", "0c", "00" ],    [ "00", "63", "33", "18", "0c", "66", "63", "00" ],    [ "1c", "36", "1c", "6e", "3b", "33", "6e", "00" ],    [ "06", "06", "03", "00", "00", "00", "00", "00" ],    [ "18", "0c", "06", "06", "06", "0c", "18", "00" ],    [ "06", "0c", "18", "18", "18", "0c", "06", "00" ],    [ "00", "66", "3c", "ff", "3c", "66", "00", "00" ],    [ "00", "0c", "0c", "3f", "0c", "0c", "00", "00" ],    [ "00", "00", "00", "00", "00", "0c", "0c", "06" ],    [ "00", "00", "00", "3f", "00", "00", "00", "00" ],    [ "00", "00", "00", "00", "00", "0c", "0c", "00" ],    [ "60", "30", "18", "0c", "06", "03", "01", "00" ],    [ "3e", "63", "73", "7b", "6f", "67", "3e", "00" ],    [ "0c", "0e", "0c", "0c", "0c", "0c", "3f", "00" ],    [ "1e", "33", "30", "1c", "06", "33", "3f", "00" ],    [ "1e", "33", "30", "1c", "30", "33", "1e", "00" ],    [ "38", "3c", "36", "33", "7f", "30", "78", "00" ],    [ "3f", "03", "1f", "30", "30", "33", "1e", "00" ],    [ "1c", "06", "03", "1f", "33", "33", "1e", "00" ],    [ "3f", "33", "30", "18", "0c", "0c", "0c", "00" ],    [ "1e", "33", "33", "1e", "33", "33", "1e", "00" ],    [ "1e", "33", "33", "3e", "30", "18", "0e", "00" ],    [ "00", "0c", "0c", "00", "00", "0c", "0c", "00" ],    [ "00", "0c", "0c", "00", "00", "0c", "0c", "06" ],    [ "18", "0c", "06", "03", "06", "0c", "18", "00" ],    [ "00", "00", "3f", "00", "00", "3f", "00", "00" ],    [ "06", "0c", "18", "30", "18", "0c", "06", "00" ],    [ "1e", "33", "30", "18", "0c", "00", "0c", "00" ],    [ "3e", "63", "7b", "7b", "7b", "03", "1e", "00" ],    [ "0c", "1e", "33", "33", "3f", "33", "33", "00" ],    [ "3f", "66", "66", "3e", "66", "66", "3f", "00" ],    [ "3c", "66", "03", "03", "03", "66", "3c", "00" ],    [ "1f", "36", "66", "66", "66", "36", "1f", "00" ],    [ "7f", "46", "16", "1e", "16", "46", "7f", "00" ],    [ "7f", "46", "16", "1e", "16", "06", "0f", "00" ],    [ "3c", "66", "03", "03", "73", "66", "7c", "00" ],    [ "33", "33", "33", "3f", "33", "33", "33", "00" ],    [ "1e", "0c", "0c", "0c", "0c", "0c", "1e", "00" ],    [ "78", "30", "30", "30", "33", "33", "1e", "00" ],    [ "67", "66", "36", "1e", "36", "66", "67", "00" ],    [ "0f", "06", "06", "06", "46", "66", "7f", "00" ],    [ "63", "77", "7f", "7f", "6b", "63", "63", "00" ],    [ "63", "67", "6f", "7b", "73", "63", "63", "00" ],    [ "1c", "36", "63", "63", "63", "36", "1c", "00" ],    [ "3f", "66", "66", "3e", "06", "06", "0f", "00" ],    [ "1e", "33", "33", "33", "3b", "1e", "38", "00" ],    [ "3f", "66", "66", "3e", "36", "66", "67", "00" ],    [ "1e", "33", "07", "0e", "38", "33", "1e", "00" ],    [ "3f", "2d", "0c", "0c", "0c", "0c", "1e", "00" ],    [ "33", "33", "33", "33", "33", "33", "3f", "00" ],    [ "33", "33", "33", "33", "33", "1e", "0c", "00" ],    [ "63", "63", "63", "6b", "7f", "77", "63", "00" ],    [ "63", "63", "36", "1c", "1c", "36", "63", "00" ],    [ "33", "33", "33", "1e", "0c", "0c", "1e", "00" ],    [ "7f", "63", "31", "18", "4c", "66", "7f", "00" ],    [ "1e", "06", "06", "06", "06", "06", "1e", "00" ],    [ "03", "06", "0c", "18", "30", "60", "40", "00" ],    [ "1e", "18", "18", "18", "18", "18", "1e", "00" ],    [ "08", "1c", "36", "63", "00", "00", "00", "00" ],    [ "00", "00", "00", "00", "00", "00", "00", "ff" ],    [ "0c", "0c", "18", "00", "00", "00", "00", "00" ],    [ "00", "00", "1e", "30", "3e", "33", "6e", "00" ],    [ "07", "06", "06", "3e", "66", "66", "3b", "00" ],    [ "00", "00", "1e", "33", "03", "33", "1e", "00" ],    [ "38", "30", "30", "3e", "33", "33", "6e", "00" ],    [ "00", "00", "1e", "33", "3f", "03", "1e", "00" ],    [ "1c", "36", "06", "0f", "06", "06", "0f", "00" ],    [ "00", "00", "6e", "33", "33", "3e", "30", "1f" ],    [ "07", "06", "36", "6e", "66", "66", "67", "00" ],    [ "0c", "00", "0e", "0c", "0c", "0c", "1e", "00" ],    [ "30", "00", "30", "30", "30", "33", "33", "1e" ],    [ "07", "06", "66", "36", "1e", "36", "67", "00" ],    [ "0e", "0c", "0c", "0c", "0c", "0c", "1e", "00" ],    [ "00", "00", "33", "7f", "7f", "6b", "63", "00" ],    [ "00", "00", "1f", "33", "33", "33", "33", "00" ],    [ "00", "00", "1e", "33", "33", "33", "1e", "00" ],    [ "00", "00", "3b", "66", "66", "3e", "06", "0f" ],    [ "00", "00", "6e", "33", "33", "3e", "30", "78" ],    [ "00", "00", "3b", "6e", "66", "06", "0f", "00" ],    [ "00", "00", "3e", "03", "1e", "30", "1f", "00" ],    [ "08", "0c", "3e", "0c", "0c", "2c", "18", "00" ],    [ "00", "00", "33", "33", "33", "33", "6e", "00" ],    [ "00", "00", "33", "33", "33", "1e", "0c", "00" ],    [ "00", "00", "63", "6b", "7f", "7f", "36", "00" ],    [ "00", "00", "63", "36", "1c", "36", "63", "00" ],    [ "00", "00", "33", "33", "33", "3e", "30", "1f" ],    [ "00", "00", "3f", "19", "0c", "26", "3f", "00" ],    [ "38", "0c", "0c", "07", "0c", "0c", "38", "00" ],    [ "18", "18", "18", "00", "18", "18", "18", "00" ],    [ "07", "0c", "0c", "38", "0c", "0c", "07", "00" ],    [ "6e", "3b", "00", "00", "00", "00", "00", "00" ],    [ "00", "00", "00", "00", "00", "00", "00", "00" ] ]





# char = 0x21
# fontUp = "{\n"
# fontDown = "{\n"

# while (char <= 0x7e):
# 	fontUp   += "    0x"
# 	fontDown += "    0x"
# 	fontUp   += font[char][3]
# 	fontUp   += font[char][2]
# 	fontUp   += font[char][1]
# 	fontUp   += font[char][0]
# 	fontDown += font[char][7]
# 	fontDown += font[char][6]
# 	fontDown += font[char][5]
# 	fontDown += font[char][4]
# 	if (char != 0x7e):
# 		fontUp   += ","
# 		fontDown += ","
# 	else:
# 		fontUp   += " "
# 		fontDown += " "
# 	fontUp += " // " + str(hex(char)) + " (" + bytearray.fromhex(str(hex(char)).replace("0x", "")).decode() + ")\n"
# 	fontDown += " // " + str(hex(char)) + " (" + bytearray.fromhex(str(hex(char)).replace("0x", "")).decode() + ")\n"
# 	char += 1

# fontUp += "};"
# fontDown += "};"
# print(fontUp.replace(",\n};", "\n};"))
# print("------------------------------------------")
# print(fontDown.replace(",\n};", "\n};"))

# ===============================================================================

# char = 0x21
# output = ""

# while (char <= 0x7e):
# 	output += "case " + str(hex(char)) + ":\n"
# 	output += "    for (uint8 bit = 0; bit < 8; bit++) \n    {\n"
# 	output += "        if ((0x" + font[char][0].lower() + " >> bit) & 0x1) { SetPixel(x + bit, y + 0x0, color); }\n"
# 	output += "        if ((0x" + font[char][1].lower() + " >> bit) & 0x1) { SetPixel(x + bit, y + 0x1, color); }\n"
# 	output += "        if ((0x" + font[char][2].lower() + " >> bit) & 0x1) { SetPixel(x + bit, y + 0x2, color); }\n"
# 	output += "        if ((0x" + font[char][3].lower() + " >> bit) & 0x1) { SetPixel(x + bit, y + 0x3, color); }\n"
# 	output += "        if ((0x" + font[char][4].lower() + " >> bit) & 0x1) { SetPixel(x + bit, y + 0x4, color); }\n"
# 	output += "        if ((0x" + font[char][5].lower() + " >> bit) & 0x1) { SetPixel(x + bit, y + 0x5, color); }\n"
# 	output += "        if ((0x" + font[char][6].lower() + " >> bit) & 0x1) { SetPixel(x + bit, y + 0x6, color); }\n"
# 	output += "        if ((0x" + font[char][7].lower() + " >> bit) & 0x1) { SetPixel(x + bit, y + 0x7, color); }\n"
# 	output += "    }\n\n    return;\n"
# 	char += 1

# print(output)

# ===============================================================================

# char = 0x21
# length = 0
# row0 = "{ "
# row1 = "{ "
# row2 = "{ "
# row3 = "{ "
# row4 = "{ "
# row5 = "{ "
# row6 = "{ "
# row7 = "{ "

# while (char <= 0x7e):
# 	row0 += "0x" + font[char][0].lower() + ", "
# 	row1 += "0x" + font[char][1].lower() + ", "
# 	row2 += "0x" + font[char][2].lower() + ", "
# 	row3 += "0x" + font[char][3].lower() + ", "
# 	row4 += "0x" + font[char][4].lower() + ", "
# 	row5 += "0x" + font[char][5].lower() + ", "
# 	row6 += "0x" + font[char][6].lower() + ", "
# 	row7 += "0x" + font[char][7].lower() + ", "
# 	length += 1
# 	char += 1

# row0 += "};"
# row1 += "};"
# row2 += "};"
# row3 += "};"
# row4 += "};"
# row5 += "};"
# row6 += "};"
# row7 += "};"

# print(str(length) + "\n")
# print("row0 = " + row0.replace(", };", " };") + "\n")
# print("row1 = " + row1.replace(", };", " };") + "\n")
# print("row2 = " + row2.replace(", };", " };") + "\n")
# print("row3 = " + row3.replace(", };", " };") + "\n")
# print("row4 = " + row4.replace(", };", " };") + "\n")
# print("row5 = " + row5.replace(", };", " };") + "\n")
# print("row6 = " + row6.replace(", };", " };") + "\n")
# print("row7 = " + row7.replace(", };", " };") + "\n")

# ===============================================================================

# def format(value):
# 	if (len(value) == 0):
# 		return "0" + value.lower()
# 	return value.lower()

# char = 0
# output = "{\n"

# while (char < 128):
# 	output += "    \""
# 	output += "\\x" + format(font[char][0])
# 	output += "\\x" + format(font[char][1])
# 	output += "\\x" + format(font[char][2])
# 	output += "\\x" + format(font[char][3])
# 	output += "\\x" + format(font[char][4])
# 	output += "\\x" + format(font[char][5])
# 	output += "\\x" + format(font[char][6])
# 	output += "\\x" + format(font[char][7])
# 	output += "\",\n"
# 	char += 1


# output +=  "};"
# output = output.replace("\",\n};", "\"\n};")
# print(output)